/*
 * CubesViewer
 * Copyright (c) 2012-2016 Jose Juan Montes, see AUTHORS for more details
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.

 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


cubesviewer.views.cube.explore.onTableSort = function (view, index, iCol, sortorder) {

	data = {}
	data[view.params.mode] = [ index, sortorder ];
	$.extend (view.params.columnSort, data);

};


cubesviewer.views.cube.explore.defineColumnSort = function(view, vdefault) {
	if (view.params.mode in view.params.columnSort) {
		return view.params.columnSort[view.params.mode];
	} else {
		return vdefault;
	}
};

cubesviewer.views.cube.explore.onTableLoaded = function (view, width, index) {

	if (view.params.mode == "explore") {
		var grid = $('#summaryTable-' + view.id);
	} else if (view.params.mode == "series") {
		var grid = $('#seriesTable-' + view.id);
	} else if (view.params.mode == "facts") {
		var grid = $('#factsTable-' + view.id);
	} else {
		return;
	}

	// Hide columns as needed
	if (view.params.mode == "explore") {
		for (var i = ((view.params.mode == "explore") ? 1 : 0); i < grid.jqGrid('getGridParam','colNames').length; i++) {

			// Hide if necessary
			var colname = grid.jqGrid('getGridParam','colModel')[i].name;

			if (view.params.columnHide[colname] == true) {
				grid.jqGrid('hideCol', colname);
			}
		}
	}

};

/*
 * Create object.
 */
cubesviewer.views.cube.columns = new cubesviewerViewCubeColumns();

/*
 * Bind events.
 */
$(document).bind("cubesviewerViewCreate", { }, cubesviewer.views.cube.columns.onViewCreate);
$(document).bind("cubesviewerViewDraw", { }, cubesviewer.views.cube.columns.onViewDraw);

